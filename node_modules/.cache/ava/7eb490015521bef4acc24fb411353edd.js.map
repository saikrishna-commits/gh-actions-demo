{"version":3,"sources":["test/handlers.sinon-test.js"],"names":["test","require","sinon","mockRequest","sessionData","body","session","data","mockResponse","res","status","stub","returns","json","login","logout","checkAuth","t","req","password","true","calledWith","message","username","called","deepEqual","is"],"mappings":"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","sourceRoot":"/Users/saikrishnavurugonda/Documents/Projects/nodejs-Projects/node-ava-jest-test","sourcesContent":["const test = require('ava');\nconst sinon = require('sinon');\n\nconst mockRequest = (sessionData, body) => ({\n    session: { data: sessionData },\n    body,\n});\n\nconst mockResponse = () => {\n    const res = {};\n    res.status = sinon.stub().returns(res);\n    res.json = sinon.stub().returns(res);\n    return res;\n};\n\nconst { login, logout, checkAuth } = require('./express-handlers');\n\ntest('login > should 400 if username is missing from body', async (t) => {\n    const req = mockRequest(\n        {},\n        { password: 'boss' }\n    );\n    const res = mockResponse();\n    await login(req, res);\n    t.true(res.status.calledWith(400));\n    t.true(res.json.calledWith({\n        message: 'username and password are required'\n    }));\n});\ntest('should 400 if password is missing from body', async (t) => {\n    const req = mockRequest(\n        {},\n        { username: 'hugo' }\n    );\n    const res = mockResponse();\n    await login(req, res);\n    t.true(res.status.calledWith(400));\n    t.true(res.json.calledWith({\n        message: 'username and password are required'\n    }));\n});\ntest('should 401 with message if user with passed username does not exist', async (t) => {\n    const req = mockRequest(\n        {},\n        {\n            username: 'hugo-boss',\n            password: 'boss'\n        }\n    );\n    const res = mockResponse();\n    await login(req, res);\n    t.true(res.status.calledWith(401));\n    t.true(res.json.calledWith({\n        message: 'No user with matching username'\n    }));\n});\ntest('should 401 with message if passed password does not match stored password', async (t) => {\n    const req = mockRequest(\n        {},\n        {\n            username: 'guest',\n            password: 'not-good-password'\n        }\n    );\n    const res = mockResponse();\n    await login(req, res);\n    t.true(res.status.calledWith(401));\n    t.true(res.json.calledWith({\n        message: 'Wrong password'\n    }));\n});\ntest('should 201 and set session.data with username if user exists and right password provided', async (t) => {\n    const req = mockRequest(\n        {},\n        {\n            username: 'guest',\n            password: 'guest-boss'\n        }\n    );\n    const res = mockResponse();\n    await login(req, res);\n    t.true(res.status.calledWith(201));\n    t.true(res.json.called);\n    t.deepEqual(\n        req.session.data,\n        { username: 'guest' }\n    );\n});\n\ntest('logout > should set session.data to null', async (t) => {\n    const req = mockRequest({ username: 'hugo' });\n    const res = mockResponse();\n    await logout(req, res);\n    t.is(req.session.data, null);\n});\n\ntest('logout > should 200', async (t) => {\n    const req = mockRequest({ username: 'hugo' });\n    const res = mockResponse();\n    await logout(req, res);\n    t.true(res.status.calledWith(200));\n});\n\ntest('checkAuth > should 401 if session data is not set', async (t) => {\n    const req = mockRequest();\n    const res = mockResponse();\n    await checkAuth(req, res);\n    t.true(res.status.calledWith(401));\n});\n\ntest('checkAuth > should 200 with username from session if data is set', async (t) => {\n    const req = mockRequest({ username: 'hugo' });\n    const res = mockResponse();\n    await checkAuth(req, res);\n    t.true(res.status.calledWith(200));\n    t.true(res.json.calledWith({ username: 'hugo' }));\n})"]}